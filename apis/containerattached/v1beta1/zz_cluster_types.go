/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AuthorizationObservation struct {
}

type AuthorizationParameters struct {

	// Users that can perform operations as a cluster admin. A managed
	// ClusterRoleBinding will be created to grant the cluster-admin ClusterRole
	// to the users. Up to ten admin users can be provided.
	// For more info on RBAC, see
	// https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles
	// +kubebuilder:validation:Optional
	AdminUsers []*string `json:"adminUsers,omitempty" tf:"admin_users,omitempty"`
}

type ClusterObservation struct {

	// Output only. The region where this cluster runs.
	// For EKS clusters, this is an AWS region. For AKS clusters,
	// this is an Azure region.
	ClusterRegion *string `json:"clusterRegion,omitempty" tf:"cluster_region,omitempty"`

	// Output only. The time at which this cluster was created.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// A set of errors found in the cluster.
	// Structure is documented below.
	Errors []ErrorsObservation `json:"errors,omitempty" tf:"errors,omitempty"`

	// Fleet configuration.
	// Structure is documented below.
	// +kubebuilder:validation:Required
	Fleet []FleetObservation `json:"fleet,omitempty" tf:"fleet,omitempty"`

	// an identifier for the resource with format projects/{{project}}/locations/{{location}}/attachedClusters/{{name}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The Kubernetes version of the cluster.
	KubernetesVersion *string `json:"kubernetesVersion,omitempty" tf:"kubernetes_version,omitempty"`

	// If set, there are currently changes in flight to the cluster.
	Reconciling *bool `json:"reconciling,omitempty" tf:"reconciling,omitempty"`

	// The current state of the cluster. Possible values:
	// STATE_UNSPECIFIED, PROVISIONING, RUNNING, RECONCILING, STOPPING, ERROR,
	// DEGRADED
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// A globally unique identifier for the cluster.
	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`

	// The time at which this cluster was last updated.
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`

	// Workload Identity settings.
	// Structure is documented below.
	WorkloadIdentityConfig []WorkloadIdentityConfigObservation `json:"workloadIdentityConfig,omitempty" tf:"workload_identity_config,omitempty"`
}

type ClusterParameters struct {

	// Optional. Annotations on the cluster. This field has the same
	// restrictions as Kubernetes annotations. The total size of all keys and
	// values combined is limited to 256k. Key can have 2 segments: prefix
	// and name , separated by a slash (/). Prefix must be a DNS subdomain.
	// Name must be 63 characters or less, begin and end with alphanumerics,
	// with dashes (-), underscores (_), dots (.), and alphanumerics between.
	// +kubebuilder:validation:Optional
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Configuration related to the cluster RBAC settings.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Authorization []AuthorizationParameters `json:"authorization,omitempty" tf:"authorization,omitempty"`

	// Policy to determine what flags to send on delete.
	// +kubebuilder:validation:Optional
	DeletionPolicy *string `json:"deletionPolicy,omitempty" tf:"deletion_policy,omitempty"`

	// A human readable description of this attached cluster. Cannot be longer
	// than 255 UTF-8 encoded bytes.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The Kubernetes distribution of the underlying attached cluster. Supported values:
	// "eks", "aks".
	// +kubebuilder:validation:Required
	Distribution *string `json:"distribution" tf:"distribution,omitempty"`

	// Fleet configuration.
	// Structure is documented below.
	// +kubebuilder:validation:Required
	Fleet []FleetParameters `json:"fleet" tf:"fleet,omitempty"`

	// The location for the resource
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// Logging configuration.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	LoggingConfig []LoggingConfigParameters `json:"loggingConfig,omitempty" tf:"logging_config,omitempty"`

	// Monitoring configuration.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	MonitoringConfig []MonitoringConfigParameters `json:"monitoringConfig,omitempty" tf:"monitoring_config,omitempty"`

	// OIDC discovery information of the target cluster.
	// Kubernetes Service Account (KSA) tokens are JWT tokens signed by the cluster
	// API server. This fields indicates how GCP services
	// validate KSA tokens in order to allow system workloads (such as GKE Connect
	// and telemetry agents) to authenticate back to GCP.
	// Both clusters with public and private issuer URLs are supported.
	// Clusters with public issuers only need to specify the issuer_url field
	// while clusters with private issuers need to provide both
	// issuer_url and jwks.
	// Structure is documented below.
	// +kubebuilder:validation:Required
	OidcConfig []OidcConfigParameters `json:"oidcConfig" tf:"oidc_config,omitempty"`

	// The platform version for the cluster (e.g. 1.23.0-gke.1).
	// +kubebuilder:validation:Required
	PlatformVersion *string `json:"platformVersion" tf:"platform_version,omitempty"`

	// The number of the Fleet host project where this cluster will be registered.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`
}

type ComponentConfigObservation struct {
}

type ComponentConfigParameters struct {

	// The components to be enabled.
	// Each value may be one of SYSTEM_COMPONENTS and WORKLOADS.
	// +kubebuilder:validation:Optional
	EnableComponents []*string `json:"enableComponents,omitempty" tf:"enable_components,omitempty"`
}

type ErrorsObservation struct {

	// Human-friendly description of the error.
	Message *string `json:"message,omitempty" tf:"message,omitempty"`
}

type ErrorsParameters struct {
}

type FleetObservation struct {

	// The name of the managed Hub Membership resource associated to this
	// cluster. Membership names are formatted as
	// projects//locations/global/membership/.
	Membership *string `json:"membership,omitempty" tf:"membership,omitempty"`
}

type FleetParameters struct {

	// The number of the Fleet host project where this cluster will be registered.
	// +kubebuilder:validation:Required
	Project *string `json:"project" tf:"project,omitempty"`
}

type LoggingConfigObservation struct {
}

type LoggingConfigParameters struct {

	// The configuration of the logging components
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	ComponentConfig []ComponentConfigParameters `json:"componentConfig,omitempty" tf:"component_config,omitempty"`
}

type ManagedPrometheusConfigObservation struct {
}

type ManagedPrometheusConfigParameters struct {

	// Enable Managed Collection.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type MonitoringConfigObservation struct {
}

type MonitoringConfigParameters struct {

	// Enable Google Cloud Managed Service for Prometheus in the cluster.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	ManagedPrometheusConfig []ManagedPrometheusConfigParameters `json:"managedPrometheusConfig,omitempty" tf:"managed_prometheus_config,omitempty"`
}

type OidcConfigObservation struct {
}

type OidcConfigParameters struct {

	// A JSON Web Token (JWT) issuer URI. issuer must start with https://
	// +kubebuilder:validation:Required
	IssuerURL *string `json:"issuerUrl" tf:"issuer_url,omitempty"`

	// OIDC verification keys in JWKS format (RFC 7517).
	// +kubebuilder:validation:Optional
	Jwks *string `json:"jwks,omitempty" tf:"jwks,omitempty"`
}

type WorkloadIdentityConfigObservation struct {

	// The ID of the OIDC Identity Provider (IdP) associated to
	// the Workload Identity Pool.
	IdentityProvider *string `json:"identityProvider,omitempty" tf:"identity_provider,omitempty"`

	// The OIDC issuer URL for this cluster.
	IssuerURI *string `json:"issuerUri,omitempty" tf:"issuer_uri,omitempty"`

	// The Workload Identity Pool associated to the cluster.
	WorkloadPool *string `json:"workloadPool,omitempty" tf:"workload_pool,omitempty"`
}

type WorkloadIdentityConfigParameters struct {
}

// ClusterSpec defines the desired state of Cluster
type ClusterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClusterParameters `json:"forProvider"`
}

// ClusterStatus defines the observed state of Cluster.
type ClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Cluster is the Schema for the Clusters API. An Anthos cluster running on customer owned infrastructure.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type Cluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClusterSpec   `json:"spec"`
	Status            ClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterList contains a list of Clusters
type ClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Cluster `json:"items"`
}

// Repository type metadata.
var (
	Cluster_Kind             = "Cluster"
	Cluster_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Cluster_Kind}.String()
	Cluster_KindAPIVersion   = Cluster_Kind + "." + CRDGroupVersion.String()
	Cluster_GroupVersionKind = CRDGroupVersion.WithKind(Cluster_Kind)
)

func init() {
	SchemeBuilder.Register(&Cluster{}, &ClusterList{})
}
