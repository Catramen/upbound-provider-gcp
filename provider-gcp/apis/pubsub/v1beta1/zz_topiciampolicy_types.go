/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TopicIAMPolicyObservation struct {

	// The etag of the IAM policy.
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type TopicIAMPolicyParameters struct {

	// The policy data generated by
	// a google_iam_policy data source.
	// +kubebuilder:validation:Required
	PolicyData *string `json:"policyData" tf:"policy_data,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Used to find the parent resource to bind the IAM policy to
	// +crossplane:generate:reference:type=Topic
	// +kubebuilder:validation:Optional
	Topic *string `json:"topic,omitempty" tf:"topic,omitempty"`

	// Reference to a Topic to populate topic.
	// +kubebuilder:validation:Optional
	TopicRef *v1.Reference `json:"topicRef,omitempty" tf:"-"`

	// Selector for a Topic to populate topic.
	// +kubebuilder:validation:Optional
	TopicSelector *v1.Selector `json:"topicSelector,omitempty" tf:"-"`
}

// TopicIAMPolicySpec defines the desired state of TopicIAMPolicy
type TopicIAMPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TopicIAMPolicyParameters `json:"forProvider"`
}

// TopicIAMPolicyStatus defines the observed state of TopicIAMPolicy.
type TopicIAMPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TopicIAMPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TopicIAMPolicy is the Schema for the TopicIAMPolicys API. Collection of resources to manage IAM policy for Cloud Pub/Sub Topic
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type TopicIAMPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TopicIAMPolicySpec   `json:"spec"`
	Status            TopicIAMPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TopicIAMPolicyList contains a list of TopicIAMPolicys
type TopicIAMPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TopicIAMPolicy `json:"items"`
}

// Repository type metadata.
var (
	TopicIAMPolicy_Kind             = "TopicIAMPolicy"
	TopicIAMPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TopicIAMPolicy_Kind}.String()
	TopicIAMPolicy_KindAPIVersion   = TopicIAMPolicy_Kind + "." + CRDGroupVersion.String()
	TopicIAMPolicy_GroupVersionKind = CRDGroupVersion.WithKind(TopicIAMPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&TopicIAMPolicy{}, &TopicIAMPolicyList{})
}
